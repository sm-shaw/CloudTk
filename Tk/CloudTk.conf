# CloudTk.conf
#
# This is the default site configuration file for CloudTk.
# Per application specific configuration file can be used by
# copying CloudTk.conf into specific app subdirectories and rename
# it <app-directory-name>.conf

# This sets paramaters in the session state array which is
# used to customise CloudTk.
# 
# This method of configuration is the same used for TclHttpd.
#
# This file is processed in a safe interpreter. Given two 
# arguments, the state command sets a parameter.  With a single 
# argument, it returns the value of that parameter.

##### Xvnc Section #####

# The default location of the Xvnc executable is /usr/bin/Xvnc.
# If you need to try a different version of TigerVNC without
# changing the installed version set the new path of the 
# executable.
# 
# Default = state Xvnc,exec  /usr/bin/Xvnc

state Xvnc,exec	/usr/bin/Xvnc

# The default setting of the Xvnc server geometry is 1024x768.
# Change widthxheight 
#
# Default = state Xvnc,geometry      1024x768

state Xvnc,geometry	1024x768

# Xvnc SecurityTypes - default None. noVNC does not support
# all the SecurityTypes that TigerVNC Xvnc supports. You need
# to research this.
#
# Default = state Xvnc,SecurityTypes None

state Xvnc,SecurityTypes	None 

# To set the Xvnc font path -  The default is to not set the font
# path and Xvnc will use the compiled in options. 
# If you need to set the font path specify the full path e.g
# state Xvnc,fp /usr/X11R7/lib/X11/fonts
#
# Default = state Xvnc,fp {}

state Xvnc,fp {}

##### Window Manager Section #####

# If a window manager is not needed set the following to 0.
#
# Default = state Wm,ON 1

state Wm,ON 1

# Specify whether the matchbox window manager uses
# titlebars. Defaults to yes.
#
# This option is useful if you are running Matchbox on
# platforms where you intend to run just one application, or you
# want all applications to run 'full screen' - a set-top box style
# enviroment for example.
#
# Default = state Wm,use_titlebar yes

state Wm,use_titlebar yes

##### CloudTk Section #####

# Idle time is taken from the websocket ping/pong messages sent/received 
# by the CloudTk server to the browser. It is specified
# as seconds. So for 1 day set
#
# state idletime 86400
#
# Once the idle time is reached the noVNC session is disconnected.
#
# An idle time of 0 sets no idle time and is the default.
#
# Default = state idletime 0

state idletime 0

# When the Back button of the browser is selected the default behaviour
# of CloudTk is to disconnect the current Xvnc display and websocket
# session. Setting the Inactive parameter to 1 allows the Xvnc 
# display to remain active so when you hit the forward button of the 
# browser a new websocket connection is established but the Xvnc display
# is where you left off. The websocket message type is 1001 "loss of endpoint".
#
# Default = state Inactive 0

state Inactive 0

# For the Inactive parameter above the default time the Xvnc display
# will remain active is 300 seconds(5 minutes). Change to desired
# number of seconds
#
# Default = state InactiveTime 300

state InactiveTime 300

# If noVNC has been disconnected by the application closing or
# X button of the window manager is pressed, setting the
# SessionApp parameter to 1 will allow noVNC to connect
# and start the same application again by clicking the "Connect"
# button of noVNC.
#
# Default = state SessionApp 0

state SessionApp 0

# For the SessionApp parameter above the default time the SessionApp
# will store the application name is 300 seconds(5 minutes). 
#
# Default = state SessionAppTime 300

state SessionAppTime 300

# Crashout issues --
#
# If for any reason you need to gracefully shutdown
# your application or save its state due to loss
# of communication between server and browser, browser
# back button is pressed or browser shutdown, a
# crashout procedure per application can be called. This
# requires the "state Inactive 1" to be set above and
# a <per-application-directory>_Crashout.tcl file
# to be created. The procedure in the file must
# be named <per-application-directory>_Crashout
# Below is an example TkPool_Crashout.tcl
#
# proc TkPool_Crashout session {
#     upvar #0 Session:$session state
#
#
#
# puts state(TkApp,TkPid)=$state(TkApp,TkPid)
#
# Xdisplay_Close $state(Xdisplay) Xvnc
#
# }

##### noVNC Section #####

# Sets the html file that launches noVNC.
# By default it is vnc.html. Another html file vnc_lite.html 
# is shipped with noVNC which has no control tab and is an 
# example of the way you can customise noVNC appearance.
#
# If you want to use your own customised html file per
# application, copy the file to the <per-application-directory>
# and rename the file to <per-application-directory>_vnc.html.
# You do not need to adjust the below setting for customised
# per application html files. 
#
# Default = state noVNC,html vnc.html

state noVNC,html vnc.html

# noVNC url query string parameter to control -
# Automatically connect as soon as the page has finished loading.
#
# Default = state noVNC,autoconnect true

state noVNC,autoconnect true

# noVNC url query string parameter to control -
# If noVNC should automatically reconnect if the connection is dropped.
#
# Default = state noVNC,reconnect false

state noVNC,reconnect false

# noVNC url query string parameter to control -
# How long to wait in milliseconds before attempting to reconnect.
#
# Default = state noVNC,reconnect_delay 5000

state noVNC,reconnect_delay 5000

# noVNC url query string parameter to control -
# If other VNC clients should be disconnected when noVNC connects.
#
# Default = state noVNC,shared true

state noVNC,shared true

# noVNC url query string parameter to control -
# If the remote session should be in non-interactive mode.
#
# Default = state noVNC,view_only false

state noVNC,view_only false

# noVNC url query string parameter to control -
# f the remote session should be clipped or use scrollbars if it
# cannot fit in the browser.
#
# Default = state noVNC,view_clip false

state noVNC,view_clip false

# noVNC url query string parameter to control -
# How to resize the remote session if it is not the same size
# as the browser window. Can be one of off, scale and remote.
#
# Default = state noVNC,resize remote

state noVNC,resize remote

# noVNC url query string parameter to control -
# The session JPEG quality level. Can be 0 to 9.
#
# Default = state noVNC,quality 6

state noVNC,quality 6

# noVNC url query string parameter to control -
# The session compression level. Can be 0 to 9.
#
# Default = state noVNC,compression 2

state noVNC,compression 2

# noVNC url query string parameter to control -
# If a dot cursor should be shown when the remote
# server provides no local cursor, or provides
# a fully-transparent (invisible) cursor.
#
# Default = state noVNC,show_dot false

state noVNC,show_dot false

# noVNC url query string parameter to control -
# The console log level. Can be one of error,
# warn, info or debug.
#
# Default = state noVNC,logging warn

state noVNC,logging warn

#### Xsetroot Section ###

# If set to 1 the use of xsetroot is enabled
# CloudTk default is not to use Xsetroot as
# this was not the original behaviour.
#
# Default = state Xsetroot,ON 0

state Xsetroot,ON 0

# Set the executable path for xsetroot
#
# Default = state  Xsetroot,exec /usr/bin/xsetroot

state Xsetroot,exec /usr/bin/xsetroot

# Set the default background colour for the Xdisplay
#
# Default = state Xsetroot,bgc blue

state Xsetroot,bgc blue

# Set the -cursor_name option to Xsetroot.
# The default is to set the cursor_name 
# so the cursor display is the same as
# browser i.e. left point which is white
# and has a black boarder.
#
# If you need Xsetroot to ignore this option
# specify "{}". e.g.
# state Xsetroot,cursor_name "{}"
#
# Default state Xsetroot,cursor_name {left_ptr -bg black -fg white}

state Xsetroot,cursor_name {left_ptr -bg black -fg white}
